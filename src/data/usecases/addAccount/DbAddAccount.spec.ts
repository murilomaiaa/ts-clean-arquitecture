import { Encrypter, AddAccountModel, AccountModel } from './DbAddAccountProtocols'
import { DbAddAccount } from './DbAddAccount'
import { AddAccountRepository } from '../../protocols/AddAccountRepository'

const makeEncrypterStub = (): Encrypter => {
  class EncrypterStub implements Encrypter {
    async encrypt(value: string): Promise<string> {
      return 'hashed_value'
    }
  }

  return new EncrypterStub()
}

const makeAddAccountRepository = (): AddAccountRepository => {
  class AddAccountRepositoryStub implements AddAccountRepository {
    async add({ email, name }: AddAccountModel): Promise<AccountModel> {
      const fakeAccount = {
        id: 'valid_id',
        name,
        email,
        password: 'hashed_value'
      }

      return fakeAccount
    }
  }

  return new AddAccountRepositoryStub()
}

interface SutTypes {
  sut: DbAddAccount
  encrypterStub: Encrypter
  addAccountRepositoryStub: AddAccountRepository
}

const makeSut = (): SutTypes => {
  const addAccountRepositoryStub = makeAddAccountRepository()
  const encrypterStub = makeEncrypterStub()
  const sut = new DbAddAccount(encrypterStub, addAccountRepositoryStub)

  return {
    sut,
    encrypterStub,
    addAccountRepositoryStub
  }
}
describe('DbAddAccount usecase', () => {
  it('should call Encrypter with correct password', async () => {
    const { sut, encrypterStub } = makeSut()
    const encryptSpy = jest.spyOn(encrypterStub, 'encrypt')
    const accountData = {
      name: 'validName',
      email: 'validEmail',
      password: 'validPassword'
    }
    await sut.execute(accountData)
    expect(encryptSpy).toHaveBeenCalledWith('validPassword')
  })

  it('should throw if Encrypter throws', async () => {
    const { encrypterStub, sut } = makeSut()
    jest.spyOn(encrypterStub, 'encrypt').mockImplementationOnce(async () => {
      throw new Error()
    })
    const accountData = {
      name: 'validName',
      email: 'validEmail',
      password: 'validPassword'
    }
    const promise = sut.execute(accountData)
    await expect(promise).rejects.toThrow()
  })

  it('should call AddAccountRepository with correcr values', async () => {
    const { addAccountRepositoryStub, sut } = makeSut()
    const addSpy = jest.spyOn(addAccountRepositoryStub, 'add')
    const accountData = {
      name: 'validName',
      email: 'validEmail',
      password: 'validPassword'
    }
    await sut.execute(accountData)
    expect(addSpy).toHaveBeenCalledWith({
      name: 'validName',
      email: 'validEmail',
      // generated by encrypter
      password: 'hashed_value'
    })
  })

  it('should throw if addAccountRepository throws', async () => {
    const { addAccountRepositoryStub, sut } = makeSut()
    jest.spyOn(addAccountRepositoryStub, 'add').mockImplementationOnce(async () => {
      throw new Error()
    })
    const accountData = {
      name: 'validName',
      email: 'validEmail',
      password: 'validPassword'
    }
    const promise = sut.execute(accountData)
    await expect(promise).rejects.toThrow()
  })

  it('should return an account on success', async () => {
    const { sut } = makeSut()
    const accountData = {
      name: 'validName',
      email: 'validEmail',
      password: 'validPassword'
    }
    const account = await sut.execute(accountData)
    await expect(account).toEqual({
      ...accountData,
      password: 'hashed_value',
      id: 'valid_id'
    })
  })
})
